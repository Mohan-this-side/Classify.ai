version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ds-capstone-postgres
    environment:
      POSTGRES_DB: ds_capstone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: ds-capstone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ds-capstone-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ds_capstone
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - uploads_data:/app/uploads
      - temp_data:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ds-capstone-celery-worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ds_capstone
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../backend:/app
      - uploads_data:/app/uploads
      - temp_data:/app/temp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ds-capstone-celery-beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ds_capstone
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: ds-capstone-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend

  # ML Code Execution Sandbox
  ml-sandbox:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.sandbox
    container_name: ds-capstone-ml-sandbox
    deploy:
      resources:
        limits:
          cpus: '1.5'  # Increased for ML workloads
          memory: 2G   # Increased for ML workloads
        reservations:
          cpus: '0.5'
          memory: 512M
    # GPU support (uncomment if GPU is available)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    network_mode: none
    volumes:
      - sandbox_code:/app/code
      - sandbox_results:/app/results
      - sandbox_data:/app/data  # For storing datasets
    command: ["/app/entrypoint.sh"]
    security_opt:
      - no-new-privileges:true
      - seccomp=sandbox-seccomp.json
    read_only: true
    tmpfs:
      - /tmp:size=256M,exec,nodev,nosuid  # Increased for ML operations
    stop_grace_period: 30s
    restart: "no"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ds-capstone-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  temp_data:
  sandbox_code:
  sandbox_results:
  sandbox_data:

networks:
  default:
    name: ds-capstone-network
